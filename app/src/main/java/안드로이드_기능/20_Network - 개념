Network
- 두대 이상의 컴퓨터를 연결하는 것
- 클라이언트와 서버의 연결
    - 클라이언트 : 사용자가 볼 수 있는 기기 (N개)
    - 서버 : 사용자가 볼 수 없는 기기 (1개)

- 네트워크가 필요한 이유
    1> (클라이언트(앱) -> (internet) -> 서버)  =>  요청(내가 지금 첫화면을 그리려고 하는데 데이터 좀 줘)
    2> (서버 -> (internet) -> 클라이언트(앱))  =>  응답(화면을 그릴 수 있는 데이터가 도착)
    클라이언트의 Request(요청)서버가 response(응답)를(을) 보낸다

- 대부분의 앱들이 정보를 서버로부터 받아서 화면을 구성한다. 문제점은 없을까?
    - 매번 똑같은 화면을 그리는데 매번 요청을 하면 -> 낭비
    -> 해결책 : 캐싱
        - 한번 받은 데이터를 클라이언트가 로컬 데이터베이스에 저장을 하고,
          다시 필요한 경우에 서버에게 요청을 하는 것이 아니라 로컬 데이터베이스에 있는 데이터를 이용한다
    -> 캐싱은 구현 난이도가 높다

- 네트워킹
    - 서버와 클라이언트의 의사소통
    - 네트워크 약속(프로토콜)이 존재한다

네트워크 프로토콜(규약)
- FTP -> 파일 전송 규약
- SMTP -> 메일 전송 규약
- HTTP -> 인터넷 서비스를 위한 규약

Request (클라이언트가 서버에게 보내는 요청)
Request Header
    - 요청에 대한 추가 정보
Request Body
    - 추가 정보
    - JSON 형태로 보낸다
Request Method
    - Method 쓴 용도에 무조건 맞게 쓰지는 않아도 된다 (규약이기 때문에)
        - Get (요청) -> 데이터 좀 줘
        - Post (등록) -> 데이터 등록 해줘
        - Put (수정) -> 모든 데이터 수정 해줘
        - Patch (수정) -> 내가 원하는 일부 데이터 수정 해줘
        - Delete (삭제) -> 데이터 삭제 해줘

Response (서버가 클라이언트에게 보내는 응답)
Response Code (상태 코드)
    - 응답의 요약 (1xx(조건부 응답), 2xx(성공), 3xx(리다이렉션 완료), 4xx(요청 오류), 5xx(서버 오류))
Response
    - JSON 형태로 온다

JSON
- {} 객체 표현
- [] 배열 표현
- 키-벨류

- 문자열
- 숫자 (정수, 소수)
- 객체
- 배열
- 불린
- 널

